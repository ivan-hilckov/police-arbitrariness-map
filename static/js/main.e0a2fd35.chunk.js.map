{"version":3,"sources":["components/Department/icon.svg","components/App/App.module.css","components/District/District.tsx","components/Department/Department.tsx","components/Map/Map.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","layerPaint","layerPaintHover","District","coordinates","properties","useState","isOpen","setIsOpen","hover","setHover","type","paint","onClick","onMouseEnter","map","getCanvas","style","cursor","onMouseLeave","className","Classes","DARK","icon","title","NAME","onClose","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","usePortal","DIALOG_BODY","ABBREV","OKATO","styles","width","height","transition","hoveredIcon","filter","Department","src","name","address","ReactMapboxGlMap","ReactMapboxGl","accessToken","Map","center","zoom","containerStyle","districts","features","district","index","key","geometry","departments","department","App","app","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0a2fd35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon.5467ecd9.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1IksY\"};","import React, { useState } from 'react'\nimport { Classes, Dialog } from '@blueprintjs/core'\nimport { Layer, Feature } from 'react-mapbox-gl'\n\nconst layerPaint = {\n  'fill-outline-color': 'rgba(255, 0, 0, 1)',\n  'fill-color': 'rgba(255, 0, 0, 0.2)',\n  'fill-opacity': 0.75,\n}\nconst layerPaintHover = {\n  'fill-outline-color': 'rgba(255, 0, 0, 1)',\n  'fill-color': 'rgba(255, 0, 0, 0.6)',\n  'fill-opacity': 0.75,\n}\n\ninterface IDistrict {\n  coordinates: number[][][] | number[][][][]\n  properties: {\n    NAME: string\n    OKATO: string\n    ABBREV: string\n  }\n}\n\nconst District: React.FC<IDistrict> = ({ coordinates, properties }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [hover, setHover] = useState(false)\n\n  const onCloseClick = () => {\n    setIsOpen(false)\n  }\n\n  const onFeatureClick = () => {\n    setIsOpen(true)\n  }\n\n  const onLayerMouseEnter = ({ map }: any) => {\n    map.getCanvas().style.cursor = 'pointer'\n    setHover(true)\n  }\n\n  const onLayerMouseLive = ({ map }: any) => {\n    map.getCanvas().style.cursor = ''\n    setHover(false)\n  }\n\n  const dialogState = {\n    autoFocus: true,\n    canEscapeKeyClose: true,\n    canOutsideClickClose: true,\n    enforceFocus: true,\n    usePortal: true,\n  }\n\n  return (\n    <>\n      <Layer type=\"fill\" paint={hover ? layerPaintHover : layerPaint}>\n        <Feature\n          coordinates={coordinates}\n          onClick={onFeatureClick}\n          onMouseEnter={onLayerMouseEnter}\n          onMouseLeave={onLayerMouseLive}\n        />\n      </Layer>\n      <Dialog\n        className={Classes.DARK}\n        icon=\"info-sign\"\n        title={properties.NAME}\n        isOpen={isOpen}\n        onClose={onCloseClick}\n        {...dialogState}\n      >\n        <div className={Classes.DIALOG_BODY}>\n          <p>{properties.ABBREV}</p>\n          <p>{properties.OKATO}</p>\n        </div>\n      </Dialog>\n    </>\n  )\n}\n\nexport default District\n","import React, { useState } from 'react'\nimport { Classes, Dialog } from '@blueprintjs/core'\nimport { Marker } from 'react-mapbox-gl'\nimport icon from './icon.svg'\n\nconst styles: { [key: string]: React.CSSProperties } = {\n  icon: {\n    width: 50,\n    height: 50,\n    cursor: 'pointer',\n    transition: 'all 0.3s',\n  },\n  hoveredIcon: {\n    width: 50,\n    height: 50,\n    cursor: 'pointer',\n    transition: 'all 0.3s',\n    filter: 'invert(1)',\n  },\n}\n\ninterface IDistrict {\n  coordinates: number[]\n  properties: {\n    name: string\n    address: string\n  }\n}\n\nconst Department: React.FC<IDistrict> = ({ coordinates, properties }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [hover, setHover] = useState(false)\n\n  const onCloseClick = () => setIsOpen(false)\n  const onFeatureClick = () => setIsOpen(true)\n  const onLayerMouseEnter = () => setHover(true)\n  const onLayerMouseLive = () => setHover(false)\n\n  const dialogState = {\n    autoFocus: true,\n    canEscapeKeyClose: true,\n    canOutsideClickClose: true,\n    enforceFocus: true,\n    usePortal: true,\n  }\n\n  return (\n    <>\n      <Marker\n        coordinates={coordinates}\n        onClick={onFeatureClick}\n        onMouseEnter={onLayerMouseEnter}\n        onMouseLeave={onLayerMouseLive}\n      >\n        <img src={icon} style={hover ? styles.hoveredIcon : styles.icon} />\n      </Marker>\n      <Dialog\n        className={Classes.DARK}\n        icon=\"info-sign\"\n        title={properties.name}\n        isOpen={isOpen}\n        onClose={onCloseClick}\n        {...dialogState}\n      >\n        <div className={Classes.DIALOG_BODY}>\n          <p>{properties.address}</p>\n        </div>\n      </Dialog>\n    </>\n  )\n}\n\nexport default Department\n","import React, { useState } from 'react'\nimport ReactMapboxGl from 'react-mapbox-gl'\nimport District from 'components/District/District'\nimport Department from 'components/Department/Department'\nimport districts from './districts.json'\nimport departments from './departments.json'\n\nconst ReactMapboxGlMap = ReactMapboxGl({\n  accessToken: 'pk.eyJ1Ijoic3RyYW5nZW1vbGUiLCJhIjoiY2o4b3RicGp1MDhqNTMycDEyYm85M3B6OSJ9.EEOG8yH_YtIyLmuHv8zc4g',\n})\n\nconst Map = () => {\n  const defaultProps = {\n    style: 'mapbox://styles/mapbox/streets-v9',\n    containerStyle: { height: '100vh', width: '100vw' },\n  }\n  const [center] = useState([37.49050140380859, 55.555048994867036] as [number, number])\n\n  return (\n    <ReactMapboxGlMap center={center} zoom={[9]} {...defaultProps}>\n      <>\n        {districts.features.map((district, index) => (\n          <District\n            key={`district-${index}`}\n            coordinates={district.geometry.coordinates}\n            properties={district.properties}\n          />\n        ))}\n        {departments.features.map((department, index) => (\n          <Department\n            key={`department-${index}`}\n            coordinates={department.geometry.coordinates}\n            properties={department.properties}\n          />\n        ))}\n      </>\n    </ReactMapboxGlMap>\n  )\n}\n\nexport default Map\n","import React from 'react';\nimport Map from 'components/Map/Map'\nimport styles from './App.module.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className={styles.app}>\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'normalize.css/normalize.css'\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css'\nimport '@blueprintjs/core/lib/css/blueprint.css'\nimport './index.css'\n\nimport App from 'components/App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}