{"version":3,"sources":["components/App/App.module.css","components/District/District.tsx","components/Map/Map.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","layerPaint","layerPaintHover","District","coordinates","useState","isOpen","setIsOpen","hover","setHover","type","paint","onClick","onMouseEnter","map","getCanvas","style","cursor","onMouseLeave","className","Classes","DARK","icon","title","onClose","autoFocus","canEscapeKeyClose","canOutsideClickClose","enforceFocus","usePortal","DIALOG_BODY","ReactMapboxGlMap","ReactMapboxGl","accessToken","Map","center","containerStyle","height","width","zoom","districts","features","district","geometry","key","properties","OKATO","App","styles","app","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q6kYACAA,EAAOC,QAAU,CAAC,IAAM,mB,6LCGlBC,EAAa,CACjB,qBAAsB,qBACtB,aAAc,uBACd,eAAgB,KAEZC,EAAkB,CACtB,qBAAsB,qBACtB,aAAc,uBACd,eAAgB,KA2EHC,EAxE4D,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAClEC,oBAAS,GADyD,mBACvFC,EADuF,KAC/EC,EAD+E,OAEpEF,oBAAS,GAF2D,mBAEvFG,EAFuF,KAEhFC,EAFgF,KA8B9F,OACE,oCACE,kBAAC,IAAD,CAAOC,KAAK,OAAOC,MAAOH,EAAQN,EAAkBD,GAClD,kBAAC,IAAD,CACEG,YAAaA,EACbQ,QA3Be,WACrBL,GAAU,IA2BJM,aAxBkB,SAAC,GAAiB,EAAfC,IACvBC,YAAYC,MAAMC,OAAS,UAC/BR,GAAS,IAuBHS,aApBiB,SAAC,GAAiB,EAAfJ,IACtBC,YAAYC,MAAMC,OAAS,GAC/BR,GAAS,OAqBP,kBAAC,IAAD,eAAQU,UAAWC,IAAQC,KAAMC,KAAK,YAAYC,MAAM,mBAAmBjB,OAAQA,EAAQkB,QApC1E,WACnBjB,GAAU,KAiBQ,CAClBkB,WAAW,EACXC,mBAAmB,EACnBC,sBAAsB,EACtBC,cAAc,EACdC,WAAW,IAcP,yBAAKV,UAAWC,IAAQU,aACtB,2BACE,oMAKF,qWAKA,2SAKA,8cAOA,qH,QC3EJC,EAAmBC,YAAc,CACrCC,YAAa,mGAmBAC,EAhBH,WACV,IADgB,EAKC7B,mBAAS,CAAC,kBAAmB,qBAAvC8B,EALS,oBAOhB,OACE,kBAACJ,EAAD,iBAPmB,CACnBf,MAAO,oCACPoB,eAAgB,CAAEC,OAAQ,QAASC,MAAO,UAK1C,CAAoCH,OAAQA,EAAQI,KAAM,CAAC,KACxDC,EAAUC,SAAS3B,KAAI,SAAA4B,GAAQ,OAC9B,kBAAC,EAAD,CAAUtC,YAAasC,EAASC,SAASvC,YAAawC,IAAKF,EAASG,WAAWC,a,iBCPxEC,EARO,WACpB,OACE,yBAAK5B,UAAW6B,IAAOC,KACrB,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6e82a360.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__1IksY\"};","import React, { useState } from 'react'\nimport { Classes, Dialog } from '@blueprintjs/core'\nimport { Layer, Feature } from 'react-mapbox-gl'\n\nconst layerPaint = {\n  'fill-outline-color': 'rgba(255, 0, 0, 1)',\n  'fill-color': 'rgba(255, 0, 0, 0.2)',\n  'fill-opacity': 0.75,\n}\nconst layerPaintHover = {\n  'fill-outline-color': 'rgba(255, 0, 0, 1)',\n  'fill-color': 'rgba(255, 0, 0, 0.8)',\n  'fill-opacity': 0.75,\n}\n\nconst District: React.FC<{ coordinates: number[][][] | number[][][][] }> = ({ coordinates }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const [hover, setHover] = useState(false)\n\n  const onCloseClick = () => {\n    setIsOpen(false)\n  }\n\n  const onFeatureClick = () => {\n    setIsOpen(true)\n  }\n\n  const onLayerMouseEnter = ({ map }: any) => {\n    map.getCanvas().style.cursor = 'pointer'\n    setHover(true)\n  }\n\n  const onLayerMouseLive = ({ map }: any) => {\n    map.getCanvas().style.cursor = ''\n    setHover(false)\n  }\n\n  const dialogState = {\n    autoFocus: true,\n    canEscapeKeyClose: true,\n    canOutsideClickClose: true,\n    enforceFocus: true,\n    usePortal: true,\n  }\n\n  return (\n    <>\n      <Layer type=\"fill\" paint={hover ? layerPaintHover : layerPaint}>\n        <Feature\n          coordinates={coordinates}\n          onClick={onFeatureClick}\n          onMouseEnter={onLayerMouseEnter}\n          onMouseLeave={onLayerMouseLive}\n        />\n      </Layer>\n      <Dialog className={Classes.DARK} icon=\"info-sign\" title=\"Palantir Foundry\" isOpen={isOpen} onClose={onCloseClick} {...dialogState}>\n        <div className={Classes.DIALOG_BODY}>\n          <p>\n            <strong>\n              Data integration is the seminal problem of the digital age. For over ten years, we’ve helped the world’s\n              premier organizations rise to the challenge.\n            </strong>\n          </p>\n          <p>\n            Palantir Foundry radically reimagines the way enterprises interact with data by amplifying and extending the\n            power of data integration. With Foundry, anyone can source, fuse, and transform data into any shape they\n            desire. Business analysts become data engineers — and leaders in their organization’s data revolution.\n          </p>\n          <p>\n            Foundry’s back end includes a suite of best-in-class data integration capabilities: data provenance,\n            git-style versioning semantics, granular access controls, branching, transformation authoring, and more. But\n            these powers are not limited to the back-end IT shop.\n          </p>\n          <p>\n            In Foundry, tables, applications, reports, presentations, and spreadsheets operate as data integrations in\n            their own right. Access controls, transformation logic, and data quality flow from original data source to\n            intermediate analysis to presentation in real time. Every end product created in Foundry becomes a new data\n            source that other users can build upon. And the enterprise data foundation goes where the business drives\n            it.\n          </p>\n          <p>Start the revolution. Unleash the power of data integration with Palantir Foundry.</p>\n        </div>\n      </Dialog>\n    </>\n  )\n}\n\nexport default District\n","import React, { useState } from 'react'\nimport ReactMapboxGl from 'react-mapbox-gl'\nimport District from 'components/District/District'\nimport districts from './districts.json'\n\nconst ReactMapboxGlMap = ReactMapboxGl({\n  accessToken: 'pk.eyJ1Ijoic3RyYW5nZW1vbGUiLCJhIjoiY2o4b3RicGp1MDhqNTMycDEyYm85M3B6OSJ9.EEOG8yH_YtIyLmuHv8zc4g',\n})\n\nconst Map = () => {\n  const defaultProps = {\n    style: 'mapbox://styles/mapbox/streets-v9',\n    containerStyle: { height: '100vh', width: '100vw' },\n  }\n  const [center] = useState([37.49050140380859, 55.555048994867036] as [number, number])\n\n  return (\n    <ReactMapboxGlMap {...defaultProps} center={center} zoom={[9]}>\n      {districts.features.map(district => (\n        <District coordinates={district.geometry.coordinates} key={district.properties.OKATO} />\n      ))}\n    </ReactMapboxGlMap>\n  )\n}\n\nexport default Map\n","import React from 'react';\nimport Map from 'components/Map/Map'\nimport styles from './App.module.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className={styles.app}>\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'normalize.css/normalize.css'\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css'\nimport '@blueprintjs/core/lib/css/blueprint.css'\nimport './index.css'\n\nimport App from 'components/App/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}